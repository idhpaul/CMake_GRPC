// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: CloudeinAPI.proto
// Original file comments:
// ******************************************************************************
// Created  				Jun 23, 2021
// Modified				Jul 07, 2021
// Version				1.0.0.2
//
// FILE:					CloudeinAPI.proto
// Author:				dhimm@mslm.kr
// DESCRIPTION:			Cloudein TX-SM API grpc proto
// 
// *****************************************************************************
//
#ifndef GRPC_CloudeinAPI_2eproto__INCLUDED
#define GRPC_CloudeinAPI_2eproto__INCLUDED

#include "CloudeinAPI.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace cloudeinapi {

class CloudeinSessionOperation final {
 public:
  static constexpr char const* service_full_name() {
    return "cloudeinapi.CloudeinSessionOperation";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status DoOperation(::grpc::ClientContext* context, const ::cloudeinapi::OperationRequest& request, ::cloudeinapi::OperationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::OperationResponse>> AsyncDoOperation(::grpc::ClientContext* context, const ::cloudeinapi::OperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::OperationResponse>>(AsyncDoOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::OperationResponse>> PrepareAsyncDoOperation(::grpc::ClientContext* context, const ::cloudeinapi::OperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::OperationResponse>>(PrepareAsyncDoOperationRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void DoOperation(::grpc::ClientContext* context, const ::cloudeinapi::OperationRequest* request, ::cloudeinapi::OperationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoOperation(::grpc::ClientContext* context, const ::cloudeinapi::OperationRequest* request, ::cloudeinapi::OperationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DoOperation(::grpc::ClientContext* context, const ::cloudeinapi::OperationRequest* request, ::cloudeinapi::OperationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::OperationResponse>* AsyncDoOperationRaw(::grpc::ClientContext* context, const ::cloudeinapi::OperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::OperationResponse>* PrepareAsyncDoOperationRaw(::grpc::ClientContext* context, const ::cloudeinapi::OperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status DoOperation(::grpc::ClientContext* context, const ::cloudeinapi::OperationRequest& request, ::cloudeinapi::OperationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::OperationResponse>> AsyncDoOperation(::grpc::ClientContext* context, const ::cloudeinapi::OperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::OperationResponse>>(AsyncDoOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::OperationResponse>> PrepareAsyncDoOperation(::grpc::ClientContext* context, const ::cloudeinapi::OperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::OperationResponse>>(PrepareAsyncDoOperationRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void DoOperation(::grpc::ClientContext* context, const ::cloudeinapi::OperationRequest* request, ::cloudeinapi::OperationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoOperation(::grpc::ClientContext* context, const ::cloudeinapi::OperationRequest* request, ::cloudeinapi::OperationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DoOperation(::grpc::ClientContext* context, const ::cloudeinapi::OperationRequest* request, ::cloudeinapi::OperationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::OperationResponse>* AsyncDoOperationRaw(::grpc::ClientContext* context, const ::cloudeinapi::OperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::OperationResponse>* PrepareAsyncDoOperationRaw(::grpc::ClientContext* context, const ::cloudeinapi::OperationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DoOperation_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status DoOperation(::grpc::ServerContext* context, const ::cloudeinapi::OperationRequest* request, ::cloudeinapi::OperationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DoOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoOperation() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DoOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoOperation(::grpc::ServerContext* /*context*/, const ::cloudeinapi::OperationRequest* /*request*/, ::cloudeinapi::OperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoOperation(::grpc::ServerContext* context, ::cloudeinapi::OperationRequest* request, ::grpc::ServerAsyncResponseWriter< ::cloudeinapi::OperationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DoOperation<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoOperation() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::OperationRequest, ::cloudeinapi::OperationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::cloudeinapi::OperationRequest* request, ::cloudeinapi::OperationResponse* response) { return this->DoOperation(context, request, response); }));}
    void SetMessageAllocatorFor_DoOperation(
        ::grpc::experimental::MessageAllocator< ::cloudeinapi::OperationRequest, ::cloudeinapi::OperationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::OperationRequest, ::cloudeinapi::OperationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DoOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoOperation(::grpc::ServerContext* /*context*/, const ::cloudeinapi::OperationRequest* /*request*/, ::cloudeinapi::OperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoOperation(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudeinapi::OperationRequest* /*request*/, ::cloudeinapi::OperationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoOperation(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::cloudeinapi::OperationRequest* /*request*/, ::cloudeinapi::OperationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_DoOperation<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_DoOperation<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DoOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoOperation() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DoOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoOperation(::grpc::ServerContext* /*context*/, const ::cloudeinapi::OperationRequest* /*request*/, ::cloudeinapi::OperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoOperation() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DoOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoOperation(::grpc::ServerContext* /*context*/, const ::cloudeinapi::OperationRequest* /*request*/, ::cloudeinapi::OperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoOperation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoOperation() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoOperation(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoOperation(::grpc::ServerContext* /*context*/, const ::cloudeinapi::OperationRequest* /*request*/, ::cloudeinapi::OperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoOperation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoOperation(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoOperation() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cloudeinapi::OperationRequest, ::cloudeinapi::OperationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cloudeinapi::OperationRequest, ::cloudeinapi::OperationResponse>* streamer) {
                       return this->StreamedDoOperation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoOperation(::grpc::ServerContext* /*context*/, const ::cloudeinapi::OperationRequest* /*request*/, ::cloudeinapi::OperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoOperation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudeinapi::OperationRequest,::cloudeinapi::OperationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DoOperation<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DoOperation<Service > StreamedService;
};

class CloudeinSession final {
 public:
  static constexpr char const* service_full_name() {
    return "cloudeinapi.CloudeinSession";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status DoAllocateAPI(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest& request, ::cloudeinapi::AllocateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::AllocateResponse>> AsyncDoAllocateAPI(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::AllocateResponse>>(AsyncDoAllocateAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::AllocateResponse>> PrepareAsyncDoAllocateAPI(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::AllocateResponse>>(PrepareAsyncDoAllocateAPIRaw(context, request, cq));
    }
    virtual ::grpc::Status DoPrepareAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest& request, ::cloudeinapi::PrepareResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::PrepareResponse>> AsyncDoPrepareAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::PrepareResponse>>(AsyncDoPrepareAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::PrepareResponse>> PrepareAsyncDoPrepareAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::PrepareResponse>>(PrepareAsyncDoPrepareAPIRaw(context, request, cq));
    }
    virtual ::grpc::Status DoConnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest& request, ::cloudeinapi::ConnectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::ConnectResponse>> AsyncDoConnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::ConnectResponse>>(AsyncDoConnectAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::ConnectResponse>> PrepareAsyncDoConnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::ConnectResponse>>(PrepareAsyncDoConnectAPIRaw(context, request, cq));
    }
    virtual ::grpc::Status DoReleaseAPI(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest& request, ::cloudeinapi::ReleaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::ReleaseResponse>> AsyncDoReleaseAPI(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::ReleaseResponse>>(AsyncDoReleaseAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::ReleaseResponse>> PrepareAsyncDoReleaseAPI(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::ReleaseResponse>>(PrepareAsyncDoReleaseAPIRaw(context, request, cq));
    }
    virtual ::grpc::Status DoDisconnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::DisconnectRequest& request, ::cloudeinapi::DisconnectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::DisconnectResponse>> AsyncDoDisconnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::DisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::DisconnectResponse>>(AsyncDoDisconnectAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::DisconnectResponse>> PrepareAsyncDoDisconnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::DisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::DisconnectResponse>>(PrepareAsyncDoDisconnectAPIRaw(context, request, cq));
    }
    virtual ::grpc::Status DoTimeoutAPI(::grpc::ClientContext* context, const ::cloudeinapi::TimeoutRequest& request, ::cloudeinapi::TimeoutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::TimeoutResponse>> AsyncDoTimeoutAPI(::grpc::ClientContext* context, const ::cloudeinapi::TimeoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::TimeoutResponse>>(AsyncDoTimeoutAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::TimeoutResponse>> PrepareAsyncDoTimeoutAPI(::grpc::ClientContext* context, const ::cloudeinapi::TimeoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::TimeoutResponse>>(PrepareAsyncDoTimeoutAPIRaw(context, request, cq));
    }
    virtual ::grpc::Status DoPrepareFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareFailRequest& request, ::cloudeinapi::PrepareFailResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::PrepareFailResponse>> AsyncDoPrepareFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareFailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::PrepareFailResponse>>(AsyncDoPrepareFailAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::PrepareFailResponse>> PrepareAsyncDoPrepareFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareFailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::PrepareFailResponse>>(PrepareAsyncDoPrepareFailAPIRaw(context, request, cq));
    }
    virtual ::grpc::Status DoConnectFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectFailRequest& request, ::cloudeinapi::ConnectFailResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::ConnectFailResponse>> AsyncDoConnectFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectFailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::ConnectFailResponse>>(AsyncDoConnectFailAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::ConnectFailResponse>> PrepareAsyncDoConnectFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectFailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::ConnectFailResponse>>(PrepareAsyncDoConnectFailAPIRaw(context, request, cq));
    }
    virtual ::grpc::Status DoRebootFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::RebootFailRequest& request, ::cloudeinapi::RebootFailResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::RebootFailResponse>> AsyncDoRebootFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::RebootFailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::RebootFailResponse>>(AsyncDoRebootFailAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::RebootFailResponse>> PrepareAsyncDoRebootFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::RebootFailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::RebootFailResponse>>(PrepareAsyncDoRebootFailAPIRaw(context, request, cq));
    }
    virtual ::grpc::Status DoAuthFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::AuthFailRequest& request, ::cloudeinapi::AuthFailResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::AuthFailResponse>> AsyncDoAuthFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::AuthFailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::AuthFailResponse>>(AsyncDoAuthFailAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::AuthFailResponse>> PrepareAsyncDoAuthFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::AuthFailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::AuthFailResponse>>(PrepareAsyncDoAuthFailAPIRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void DoAllocateAPI(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest* request, ::cloudeinapi::AllocateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoAllocateAPI(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest* request, ::cloudeinapi::AllocateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DoAllocateAPI(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest* request, ::cloudeinapi::AllocateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DoPrepareAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest* request, ::cloudeinapi::PrepareResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoPrepareAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest* request, ::cloudeinapi::PrepareResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DoPrepareAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest* request, ::cloudeinapi::PrepareResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DoConnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest* request, ::cloudeinapi::ConnectResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoConnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest* request, ::cloudeinapi::ConnectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DoConnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest* request, ::cloudeinapi::ConnectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DoReleaseAPI(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest* request, ::cloudeinapi::ReleaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoReleaseAPI(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest* request, ::cloudeinapi::ReleaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DoReleaseAPI(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest* request, ::cloudeinapi::ReleaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DoDisconnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::DisconnectRequest* request, ::cloudeinapi::DisconnectResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoDisconnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::DisconnectRequest* request, ::cloudeinapi::DisconnectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DoDisconnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::DisconnectRequest* request, ::cloudeinapi::DisconnectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DoTimeoutAPI(::grpc::ClientContext* context, const ::cloudeinapi::TimeoutRequest* request, ::cloudeinapi::TimeoutResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoTimeoutAPI(::grpc::ClientContext* context, const ::cloudeinapi::TimeoutRequest* request, ::cloudeinapi::TimeoutResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DoTimeoutAPI(::grpc::ClientContext* context, const ::cloudeinapi::TimeoutRequest* request, ::cloudeinapi::TimeoutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DoPrepareFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareFailRequest* request, ::cloudeinapi::PrepareFailResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoPrepareFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareFailRequest* request, ::cloudeinapi::PrepareFailResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DoPrepareFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareFailRequest* request, ::cloudeinapi::PrepareFailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DoConnectFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectFailRequest* request, ::cloudeinapi::ConnectFailResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoConnectFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectFailRequest* request, ::cloudeinapi::ConnectFailResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DoConnectFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectFailRequest* request, ::cloudeinapi::ConnectFailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DoRebootFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::RebootFailRequest* request, ::cloudeinapi::RebootFailResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoRebootFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::RebootFailRequest* request, ::cloudeinapi::RebootFailResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DoRebootFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::RebootFailRequest* request, ::cloudeinapi::RebootFailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DoAuthFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::AuthFailRequest* request, ::cloudeinapi::AuthFailResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoAuthFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::AuthFailRequest* request, ::cloudeinapi::AuthFailResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DoAuthFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::AuthFailRequest* request, ::cloudeinapi::AuthFailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::AllocateResponse>* AsyncDoAllocateAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::AllocateResponse>* PrepareAsyncDoAllocateAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::PrepareResponse>* AsyncDoPrepareAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::PrepareResponse>* PrepareAsyncDoPrepareAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::ConnectResponse>* AsyncDoConnectAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::ConnectResponse>* PrepareAsyncDoConnectAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::ReleaseResponse>* AsyncDoReleaseAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::ReleaseResponse>* PrepareAsyncDoReleaseAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::DisconnectResponse>* AsyncDoDisconnectAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::DisconnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::DisconnectResponse>* PrepareAsyncDoDisconnectAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::DisconnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::TimeoutResponse>* AsyncDoTimeoutAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::TimeoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::TimeoutResponse>* PrepareAsyncDoTimeoutAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::TimeoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::PrepareFailResponse>* AsyncDoPrepareFailAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::PrepareFailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::PrepareFailResponse>* PrepareAsyncDoPrepareFailAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::PrepareFailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::ConnectFailResponse>* AsyncDoConnectFailAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::ConnectFailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::ConnectFailResponse>* PrepareAsyncDoConnectFailAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::ConnectFailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::RebootFailResponse>* AsyncDoRebootFailAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::RebootFailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::RebootFailResponse>* PrepareAsyncDoRebootFailAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::RebootFailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::AuthFailResponse>* AsyncDoAuthFailAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::AuthFailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudeinapi::AuthFailResponse>* PrepareAsyncDoAuthFailAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::AuthFailRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status DoAllocateAPI(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest& request, ::cloudeinapi::AllocateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::AllocateResponse>> AsyncDoAllocateAPI(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::AllocateResponse>>(AsyncDoAllocateAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::AllocateResponse>> PrepareAsyncDoAllocateAPI(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::AllocateResponse>>(PrepareAsyncDoAllocateAPIRaw(context, request, cq));
    }
    ::grpc::Status DoPrepareAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest& request, ::cloudeinapi::PrepareResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::PrepareResponse>> AsyncDoPrepareAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::PrepareResponse>>(AsyncDoPrepareAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::PrepareResponse>> PrepareAsyncDoPrepareAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::PrepareResponse>>(PrepareAsyncDoPrepareAPIRaw(context, request, cq));
    }
    ::grpc::Status DoConnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest& request, ::cloudeinapi::ConnectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::ConnectResponse>> AsyncDoConnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::ConnectResponse>>(AsyncDoConnectAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::ConnectResponse>> PrepareAsyncDoConnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::ConnectResponse>>(PrepareAsyncDoConnectAPIRaw(context, request, cq));
    }
    ::grpc::Status DoReleaseAPI(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest& request, ::cloudeinapi::ReleaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::ReleaseResponse>> AsyncDoReleaseAPI(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::ReleaseResponse>>(AsyncDoReleaseAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::ReleaseResponse>> PrepareAsyncDoReleaseAPI(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::ReleaseResponse>>(PrepareAsyncDoReleaseAPIRaw(context, request, cq));
    }
    ::grpc::Status DoDisconnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::DisconnectRequest& request, ::cloudeinapi::DisconnectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::DisconnectResponse>> AsyncDoDisconnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::DisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::DisconnectResponse>>(AsyncDoDisconnectAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::DisconnectResponse>> PrepareAsyncDoDisconnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::DisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::DisconnectResponse>>(PrepareAsyncDoDisconnectAPIRaw(context, request, cq));
    }
    ::grpc::Status DoTimeoutAPI(::grpc::ClientContext* context, const ::cloudeinapi::TimeoutRequest& request, ::cloudeinapi::TimeoutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::TimeoutResponse>> AsyncDoTimeoutAPI(::grpc::ClientContext* context, const ::cloudeinapi::TimeoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::TimeoutResponse>>(AsyncDoTimeoutAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::TimeoutResponse>> PrepareAsyncDoTimeoutAPI(::grpc::ClientContext* context, const ::cloudeinapi::TimeoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::TimeoutResponse>>(PrepareAsyncDoTimeoutAPIRaw(context, request, cq));
    }
    ::grpc::Status DoPrepareFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareFailRequest& request, ::cloudeinapi::PrepareFailResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::PrepareFailResponse>> AsyncDoPrepareFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareFailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::PrepareFailResponse>>(AsyncDoPrepareFailAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::PrepareFailResponse>> PrepareAsyncDoPrepareFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareFailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::PrepareFailResponse>>(PrepareAsyncDoPrepareFailAPIRaw(context, request, cq));
    }
    ::grpc::Status DoConnectFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectFailRequest& request, ::cloudeinapi::ConnectFailResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::ConnectFailResponse>> AsyncDoConnectFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectFailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::ConnectFailResponse>>(AsyncDoConnectFailAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::ConnectFailResponse>> PrepareAsyncDoConnectFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectFailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::ConnectFailResponse>>(PrepareAsyncDoConnectFailAPIRaw(context, request, cq));
    }
    ::grpc::Status DoRebootFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::RebootFailRequest& request, ::cloudeinapi::RebootFailResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::RebootFailResponse>> AsyncDoRebootFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::RebootFailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::RebootFailResponse>>(AsyncDoRebootFailAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::RebootFailResponse>> PrepareAsyncDoRebootFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::RebootFailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::RebootFailResponse>>(PrepareAsyncDoRebootFailAPIRaw(context, request, cq));
    }
    ::grpc::Status DoAuthFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::AuthFailRequest& request, ::cloudeinapi::AuthFailResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::AuthFailResponse>> AsyncDoAuthFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::AuthFailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::AuthFailResponse>>(AsyncDoAuthFailAPIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::AuthFailResponse>> PrepareAsyncDoAuthFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::AuthFailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudeinapi::AuthFailResponse>>(PrepareAsyncDoAuthFailAPIRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void DoAllocateAPI(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest* request, ::cloudeinapi::AllocateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoAllocateAPI(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest* request, ::cloudeinapi::AllocateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DoAllocateAPI(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest* request, ::cloudeinapi::AllocateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DoPrepareAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest* request, ::cloudeinapi::PrepareResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoPrepareAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest* request, ::cloudeinapi::PrepareResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DoPrepareAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest* request, ::cloudeinapi::PrepareResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DoConnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest* request, ::cloudeinapi::ConnectResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoConnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest* request, ::cloudeinapi::ConnectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DoConnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest* request, ::cloudeinapi::ConnectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DoReleaseAPI(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest* request, ::cloudeinapi::ReleaseResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoReleaseAPI(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest* request, ::cloudeinapi::ReleaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DoReleaseAPI(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest* request, ::cloudeinapi::ReleaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DoDisconnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::DisconnectRequest* request, ::cloudeinapi::DisconnectResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoDisconnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::DisconnectRequest* request, ::cloudeinapi::DisconnectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DoDisconnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::DisconnectRequest* request, ::cloudeinapi::DisconnectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DoTimeoutAPI(::grpc::ClientContext* context, const ::cloudeinapi::TimeoutRequest* request, ::cloudeinapi::TimeoutResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoTimeoutAPI(::grpc::ClientContext* context, const ::cloudeinapi::TimeoutRequest* request, ::cloudeinapi::TimeoutResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DoTimeoutAPI(::grpc::ClientContext* context, const ::cloudeinapi::TimeoutRequest* request, ::cloudeinapi::TimeoutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DoPrepareFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareFailRequest* request, ::cloudeinapi::PrepareFailResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoPrepareFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareFailRequest* request, ::cloudeinapi::PrepareFailResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DoPrepareFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareFailRequest* request, ::cloudeinapi::PrepareFailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DoConnectFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectFailRequest* request, ::cloudeinapi::ConnectFailResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoConnectFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectFailRequest* request, ::cloudeinapi::ConnectFailResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DoConnectFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectFailRequest* request, ::cloudeinapi::ConnectFailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DoRebootFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::RebootFailRequest* request, ::cloudeinapi::RebootFailResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoRebootFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::RebootFailRequest* request, ::cloudeinapi::RebootFailResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DoRebootFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::RebootFailRequest* request, ::cloudeinapi::RebootFailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DoAuthFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::AuthFailRequest* request, ::cloudeinapi::AuthFailResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoAuthFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::AuthFailRequest* request, ::cloudeinapi::AuthFailResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DoAuthFailAPI(::grpc::ClientContext* context, const ::cloudeinapi::AuthFailRequest* request, ::cloudeinapi::AuthFailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::AllocateResponse>* AsyncDoAllocateAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::AllocateResponse>* PrepareAsyncDoAllocateAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::PrepareResponse>* AsyncDoPrepareAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::PrepareResponse>* PrepareAsyncDoPrepareAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::ConnectResponse>* AsyncDoConnectAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::ConnectResponse>* PrepareAsyncDoConnectAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::ReleaseResponse>* AsyncDoReleaseAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::ReleaseResponse>* PrepareAsyncDoReleaseAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::DisconnectResponse>* AsyncDoDisconnectAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::DisconnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::DisconnectResponse>* PrepareAsyncDoDisconnectAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::DisconnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::TimeoutResponse>* AsyncDoTimeoutAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::TimeoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::TimeoutResponse>* PrepareAsyncDoTimeoutAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::TimeoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::PrepareFailResponse>* AsyncDoPrepareFailAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::PrepareFailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::PrepareFailResponse>* PrepareAsyncDoPrepareFailAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::PrepareFailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::ConnectFailResponse>* AsyncDoConnectFailAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::ConnectFailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::ConnectFailResponse>* PrepareAsyncDoConnectFailAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::ConnectFailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::RebootFailResponse>* AsyncDoRebootFailAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::RebootFailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::RebootFailResponse>* PrepareAsyncDoRebootFailAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::RebootFailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::AuthFailResponse>* AsyncDoAuthFailAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::AuthFailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudeinapi::AuthFailResponse>* PrepareAsyncDoAuthFailAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::AuthFailRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DoAllocateAPI_;
    const ::grpc::internal::RpcMethod rpcmethod_DoPrepareAPI_;
    const ::grpc::internal::RpcMethod rpcmethod_DoConnectAPI_;
    const ::grpc::internal::RpcMethod rpcmethod_DoReleaseAPI_;
    const ::grpc::internal::RpcMethod rpcmethod_DoDisconnectAPI_;
    const ::grpc::internal::RpcMethod rpcmethod_DoTimeoutAPI_;
    const ::grpc::internal::RpcMethod rpcmethod_DoPrepareFailAPI_;
    const ::grpc::internal::RpcMethod rpcmethod_DoConnectFailAPI_;
    const ::grpc::internal::RpcMethod rpcmethod_DoRebootFailAPI_;
    const ::grpc::internal::RpcMethod rpcmethod_DoAuthFailAPI_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status DoAllocateAPI(::grpc::ServerContext* context, const ::cloudeinapi::AllocateRequest* request, ::cloudeinapi::AllocateResponse* response);
    virtual ::grpc::Status DoPrepareAPI(::grpc::ServerContext* context, const ::cloudeinapi::PrepareRequest* request, ::cloudeinapi::PrepareResponse* response);
    virtual ::grpc::Status DoConnectAPI(::grpc::ServerContext* context, const ::cloudeinapi::ConnectRequest* request, ::cloudeinapi::ConnectResponse* response);
    virtual ::grpc::Status DoReleaseAPI(::grpc::ServerContext* context, const ::cloudeinapi::ReleaseRequest* request, ::cloudeinapi::ReleaseResponse* response);
    virtual ::grpc::Status DoDisconnectAPI(::grpc::ServerContext* context, const ::cloudeinapi::DisconnectRequest* request, ::cloudeinapi::DisconnectResponse* response);
    virtual ::grpc::Status DoTimeoutAPI(::grpc::ServerContext* context, const ::cloudeinapi::TimeoutRequest* request, ::cloudeinapi::TimeoutResponse* response);
    virtual ::grpc::Status DoPrepareFailAPI(::grpc::ServerContext* context, const ::cloudeinapi::PrepareFailRequest* request, ::cloudeinapi::PrepareFailResponse* response);
    virtual ::grpc::Status DoConnectFailAPI(::grpc::ServerContext* context, const ::cloudeinapi::ConnectFailRequest* request, ::cloudeinapi::ConnectFailResponse* response);
    virtual ::grpc::Status DoRebootFailAPI(::grpc::ServerContext* context, const ::cloudeinapi::RebootFailRequest* request, ::cloudeinapi::RebootFailResponse* response);
    virtual ::grpc::Status DoAuthFailAPI(::grpc::ServerContext* context, const ::cloudeinapi::AuthFailRequest* request, ::cloudeinapi::AuthFailResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DoAllocateAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoAllocateAPI() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DoAllocateAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoAllocateAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::AllocateRequest* /*request*/, ::cloudeinapi::AllocateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoAllocateAPI(::grpc::ServerContext* context, ::cloudeinapi::AllocateRequest* request, ::grpc::ServerAsyncResponseWriter< ::cloudeinapi::AllocateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoPrepareAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoPrepareAPI() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DoPrepareAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoPrepareAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::PrepareRequest* /*request*/, ::cloudeinapi::PrepareResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoPrepareAPI(::grpc::ServerContext* context, ::cloudeinapi::PrepareRequest* request, ::grpc::ServerAsyncResponseWriter< ::cloudeinapi::PrepareResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoConnectAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoConnectAPI() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DoConnectAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoConnectAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::ConnectRequest* /*request*/, ::cloudeinapi::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoConnectAPI(::grpc::ServerContext* context, ::cloudeinapi::ConnectRequest* request, ::grpc::ServerAsyncResponseWriter< ::cloudeinapi::ConnectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoReleaseAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoReleaseAPI() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DoReleaseAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoReleaseAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::ReleaseRequest* /*request*/, ::cloudeinapi::ReleaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoReleaseAPI(::grpc::ServerContext* context, ::cloudeinapi::ReleaseRequest* request, ::grpc::ServerAsyncResponseWriter< ::cloudeinapi::ReleaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoDisconnectAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoDisconnectAPI() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DoDisconnectAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoDisconnectAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::DisconnectRequest* /*request*/, ::cloudeinapi::DisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoDisconnectAPI(::grpc::ServerContext* context, ::cloudeinapi::DisconnectRequest* request, ::grpc::ServerAsyncResponseWriter< ::cloudeinapi::DisconnectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoTimeoutAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoTimeoutAPI() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DoTimeoutAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoTimeoutAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::TimeoutRequest* /*request*/, ::cloudeinapi::TimeoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoTimeoutAPI(::grpc::ServerContext* context, ::cloudeinapi::TimeoutRequest* request, ::grpc::ServerAsyncResponseWriter< ::cloudeinapi::TimeoutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoPrepareFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoPrepareFailAPI() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DoPrepareFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoPrepareFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::PrepareFailRequest* /*request*/, ::cloudeinapi::PrepareFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoPrepareFailAPI(::grpc::ServerContext* context, ::cloudeinapi::PrepareFailRequest* request, ::grpc::ServerAsyncResponseWriter< ::cloudeinapi::PrepareFailResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoConnectFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoConnectFailAPI() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DoConnectFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoConnectFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::ConnectFailRequest* /*request*/, ::cloudeinapi::ConnectFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoConnectFailAPI(::grpc::ServerContext* context, ::cloudeinapi::ConnectFailRequest* request, ::grpc::ServerAsyncResponseWriter< ::cloudeinapi::ConnectFailResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoRebootFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoRebootFailAPI() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DoRebootFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoRebootFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::RebootFailRequest* /*request*/, ::cloudeinapi::RebootFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoRebootFailAPI(::grpc::ServerContext* context, ::cloudeinapi::RebootFailRequest* request, ::grpc::ServerAsyncResponseWriter< ::cloudeinapi::RebootFailResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoAuthFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoAuthFailAPI() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_DoAuthFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoAuthFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::AuthFailRequest* /*request*/, ::cloudeinapi::AuthFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoAuthFailAPI(::grpc::ServerContext* context, ::cloudeinapi::AuthFailRequest* request, ::grpc::ServerAsyncResponseWriter< ::cloudeinapi::AuthFailResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DoAllocateAPI<WithAsyncMethod_DoPrepareAPI<WithAsyncMethod_DoConnectAPI<WithAsyncMethod_DoReleaseAPI<WithAsyncMethod_DoDisconnectAPI<WithAsyncMethod_DoTimeoutAPI<WithAsyncMethod_DoPrepareFailAPI<WithAsyncMethod_DoConnectFailAPI<WithAsyncMethod_DoRebootFailAPI<WithAsyncMethod_DoAuthFailAPI<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoAllocateAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoAllocateAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::AllocateRequest, ::cloudeinapi::AllocateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::cloudeinapi::AllocateRequest* request, ::cloudeinapi::AllocateResponse* response) { return this->DoAllocateAPI(context, request, response); }));}
    void SetMessageAllocatorFor_DoAllocateAPI(
        ::grpc::experimental::MessageAllocator< ::cloudeinapi::AllocateRequest, ::cloudeinapi::AllocateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::AllocateRequest, ::cloudeinapi::AllocateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DoAllocateAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoAllocateAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::AllocateRequest* /*request*/, ::cloudeinapi::AllocateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoAllocateAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudeinapi::AllocateRequest* /*request*/, ::cloudeinapi::AllocateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoAllocateAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::cloudeinapi::AllocateRequest* /*request*/, ::cloudeinapi::AllocateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoPrepareAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoPrepareAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::PrepareRequest, ::cloudeinapi::PrepareResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::cloudeinapi::PrepareRequest* request, ::cloudeinapi::PrepareResponse* response) { return this->DoPrepareAPI(context, request, response); }));}
    void SetMessageAllocatorFor_DoPrepareAPI(
        ::grpc::experimental::MessageAllocator< ::cloudeinapi::PrepareRequest, ::cloudeinapi::PrepareResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::PrepareRequest, ::cloudeinapi::PrepareResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DoPrepareAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoPrepareAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::PrepareRequest* /*request*/, ::cloudeinapi::PrepareResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoPrepareAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudeinapi::PrepareRequest* /*request*/, ::cloudeinapi::PrepareResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoPrepareAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::cloudeinapi::PrepareRequest* /*request*/, ::cloudeinapi::PrepareResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoConnectAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoConnectAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::ConnectRequest, ::cloudeinapi::ConnectResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::cloudeinapi::ConnectRequest* request, ::cloudeinapi::ConnectResponse* response) { return this->DoConnectAPI(context, request, response); }));}
    void SetMessageAllocatorFor_DoConnectAPI(
        ::grpc::experimental::MessageAllocator< ::cloudeinapi::ConnectRequest, ::cloudeinapi::ConnectResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::ConnectRequest, ::cloudeinapi::ConnectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DoConnectAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoConnectAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::ConnectRequest* /*request*/, ::cloudeinapi::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoConnectAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudeinapi::ConnectRequest* /*request*/, ::cloudeinapi::ConnectResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoConnectAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::cloudeinapi::ConnectRequest* /*request*/, ::cloudeinapi::ConnectResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoReleaseAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoReleaseAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::ReleaseRequest, ::cloudeinapi::ReleaseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::cloudeinapi::ReleaseRequest* request, ::cloudeinapi::ReleaseResponse* response) { return this->DoReleaseAPI(context, request, response); }));}
    void SetMessageAllocatorFor_DoReleaseAPI(
        ::grpc::experimental::MessageAllocator< ::cloudeinapi::ReleaseRequest, ::cloudeinapi::ReleaseResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::ReleaseRequest, ::cloudeinapi::ReleaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DoReleaseAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoReleaseAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::ReleaseRequest* /*request*/, ::cloudeinapi::ReleaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoReleaseAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudeinapi::ReleaseRequest* /*request*/, ::cloudeinapi::ReleaseResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoReleaseAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::cloudeinapi::ReleaseRequest* /*request*/, ::cloudeinapi::ReleaseResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoDisconnectAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoDisconnectAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::DisconnectRequest, ::cloudeinapi::DisconnectResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::cloudeinapi::DisconnectRequest* request, ::cloudeinapi::DisconnectResponse* response) { return this->DoDisconnectAPI(context, request, response); }));}
    void SetMessageAllocatorFor_DoDisconnectAPI(
        ::grpc::experimental::MessageAllocator< ::cloudeinapi::DisconnectRequest, ::cloudeinapi::DisconnectResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::DisconnectRequest, ::cloudeinapi::DisconnectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DoDisconnectAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoDisconnectAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::DisconnectRequest* /*request*/, ::cloudeinapi::DisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoDisconnectAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudeinapi::DisconnectRequest* /*request*/, ::cloudeinapi::DisconnectResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoDisconnectAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::cloudeinapi::DisconnectRequest* /*request*/, ::cloudeinapi::DisconnectResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoTimeoutAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoTimeoutAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::TimeoutRequest, ::cloudeinapi::TimeoutResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::cloudeinapi::TimeoutRequest* request, ::cloudeinapi::TimeoutResponse* response) { return this->DoTimeoutAPI(context, request, response); }));}
    void SetMessageAllocatorFor_DoTimeoutAPI(
        ::grpc::experimental::MessageAllocator< ::cloudeinapi::TimeoutRequest, ::cloudeinapi::TimeoutResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::TimeoutRequest, ::cloudeinapi::TimeoutResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DoTimeoutAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoTimeoutAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::TimeoutRequest* /*request*/, ::cloudeinapi::TimeoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoTimeoutAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudeinapi::TimeoutRequest* /*request*/, ::cloudeinapi::TimeoutResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoTimeoutAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::cloudeinapi::TimeoutRequest* /*request*/, ::cloudeinapi::TimeoutResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoPrepareFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoPrepareFailAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::PrepareFailRequest, ::cloudeinapi::PrepareFailResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::cloudeinapi::PrepareFailRequest* request, ::cloudeinapi::PrepareFailResponse* response) { return this->DoPrepareFailAPI(context, request, response); }));}
    void SetMessageAllocatorFor_DoPrepareFailAPI(
        ::grpc::experimental::MessageAllocator< ::cloudeinapi::PrepareFailRequest, ::cloudeinapi::PrepareFailResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::PrepareFailRequest, ::cloudeinapi::PrepareFailResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DoPrepareFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoPrepareFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::PrepareFailRequest* /*request*/, ::cloudeinapi::PrepareFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoPrepareFailAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudeinapi::PrepareFailRequest* /*request*/, ::cloudeinapi::PrepareFailResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoPrepareFailAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::cloudeinapi::PrepareFailRequest* /*request*/, ::cloudeinapi::PrepareFailResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoConnectFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoConnectFailAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::ConnectFailRequest, ::cloudeinapi::ConnectFailResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::cloudeinapi::ConnectFailRequest* request, ::cloudeinapi::ConnectFailResponse* response) { return this->DoConnectFailAPI(context, request, response); }));}
    void SetMessageAllocatorFor_DoConnectFailAPI(
        ::grpc::experimental::MessageAllocator< ::cloudeinapi::ConnectFailRequest, ::cloudeinapi::ConnectFailResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::ConnectFailRequest, ::cloudeinapi::ConnectFailResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DoConnectFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoConnectFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::ConnectFailRequest* /*request*/, ::cloudeinapi::ConnectFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoConnectFailAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudeinapi::ConnectFailRequest* /*request*/, ::cloudeinapi::ConnectFailResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoConnectFailAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::cloudeinapi::ConnectFailRequest* /*request*/, ::cloudeinapi::ConnectFailResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoRebootFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoRebootFailAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::RebootFailRequest, ::cloudeinapi::RebootFailResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::cloudeinapi::RebootFailRequest* request, ::cloudeinapi::RebootFailResponse* response) { return this->DoRebootFailAPI(context, request, response); }));}
    void SetMessageAllocatorFor_DoRebootFailAPI(
        ::grpc::experimental::MessageAllocator< ::cloudeinapi::RebootFailRequest, ::cloudeinapi::RebootFailResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::RebootFailRequest, ::cloudeinapi::RebootFailResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DoRebootFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoRebootFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::RebootFailRequest* /*request*/, ::cloudeinapi::RebootFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoRebootFailAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudeinapi::RebootFailRequest* /*request*/, ::cloudeinapi::RebootFailResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoRebootFailAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::cloudeinapi::RebootFailRequest* /*request*/, ::cloudeinapi::RebootFailResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoAuthFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoAuthFailAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::AuthFailRequest, ::cloudeinapi::AuthFailResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::cloudeinapi::AuthFailRequest* request, ::cloudeinapi::AuthFailResponse* response) { return this->DoAuthFailAPI(context, request, response); }));}
    void SetMessageAllocatorFor_DoAuthFailAPI(
        ::grpc::experimental::MessageAllocator< ::cloudeinapi::AuthFailRequest, ::cloudeinapi::AuthFailResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cloudeinapi::AuthFailRequest, ::cloudeinapi::AuthFailResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DoAuthFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoAuthFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::AuthFailRequest* /*request*/, ::cloudeinapi::AuthFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoAuthFailAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudeinapi::AuthFailRequest* /*request*/, ::cloudeinapi::AuthFailResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoAuthFailAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::cloudeinapi::AuthFailRequest* /*request*/, ::cloudeinapi::AuthFailResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_DoAllocateAPI<ExperimentalWithCallbackMethod_DoPrepareAPI<ExperimentalWithCallbackMethod_DoConnectAPI<ExperimentalWithCallbackMethod_DoReleaseAPI<ExperimentalWithCallbackMethod_DoDisconnectAPI<ExperimentalWithCallbackMethod_DoTimeoutAPI<ExperimentalWithCallbackMethod_DoPrepareFailAPI<ExperimentalWithCallbackMethod_DoConnectFailAPI<ExperimentalWithCallbackMethod_DoRebootFailAPI<ExperimentalWithCallbackMethod_DoAuthFailAPI<Service > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_DoAllocateAPI<ExperimentalWithCallbackMethod_DoPrepareAPI<ExperimentalWithCallbackMethod_DoConnectAPI<ExperimentalWithCallbackMethod_DoReleaseAPI<ExperimentalWithCallbackMethod_DoDisconnectAPI<ExperimentalWithCallbackMethod_DoTimeoutAPI<ExperimentalWithCallbackMethod_DoPrepareFailAPI<ExperimentalWithCallbackMethod_DoConnectFailAPI<ExperimentalWithCallbackMethod_DoRebootFailAPI<ExperimentalWithCallbackMethod_DoAuthFailAPI<Service > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DoAllocateAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoAllocateAPI() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DoAllocateAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoAllocateAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::AllocateRequest* /*request*/, ::cloudeinapi::AllocateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoPrepareAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoPrepareAPI() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DoPrepareAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoPrepareAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::PrepareRequest* /*request*/, ::cloudeinapi::PrepareResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoConnectAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoConnectAPI() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DoConnectAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoConnectAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::ConnectRequest* /*request*/, ::cloudeinapi::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoReleaseAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoReleaseAPI() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DoReleaseAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoReleaseAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::ReleaseRequest* /*request*/, ::cloudeinapi::ReleaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoDisconnectAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoDisconnectAPI() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DoDisconnectAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoDisconnectAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::DisconnectRequest* /*request*/, ::cloudeinapi::DisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoTimeoutAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoTimeoutAPI() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DoTimeoutAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoTimeoutAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::TimeoutRequest* /*request*/, ::cloudeinapi::TimeoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoPrepareFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoPrepareFailAPI() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DoPrepareFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoPrepareFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::PrepareFailRequest* /*request*/, ::cloudeinapi::PrepareFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoConnectFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoConnectFailAPI() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DoConnectFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoConnectFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::ConnectFailRequest* /*request*/, ::cloudeinapi::ConnectFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoRebootFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoRebootFailAPI() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DoRebootFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoRebootFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::RebootFailRequest* /*request*/, ::cloudeinapi::RebootFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoAuthFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoAuthFailAPI() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_DoAuthFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoAuthFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::AuthFailRequest* /*request*/, ::cloudeinapi::AuthFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoAllocateAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoAllocateAPI() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DoAllocateAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoAllocateAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::AllocateRequest* /*request*/, ::cloudeinapi::AllocateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoAllocateAPI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoPrepareAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoPrepareAPI() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DoPrepareAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoPrepareAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::PrepareRequest* /*request*/, ::cloudeinapi::PrepareResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoPrepareAPI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoConnectAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoConnectAPI() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DoConnectAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoConnectAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::ConnectRequest* /*request*/, ::cloudeinapi::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoConnectAPI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoReleaseAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoReleaseAPI() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DoReleaseAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoReleaseAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::ReleaseRequest* /*request*/, ::cloudeinapi::ReleaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoReleaseAPI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoDisconnectAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoDisconnectAPI() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DoDisconnectAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoDisconnectAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::DisconnectRequest* /*request*/, ::cloudeinapi::DisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoDisconnectAPI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoTimeoutAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoTimeoutAPI() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DoTimeoutAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoTimeoutAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::TimeoutRequest* /*request*/, ::cloudeinapi::TimeoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoTimeoutAPI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoPrepareFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoPrepareFailAPI() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DoPrepareFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoPrepareFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::PrepareFailRequest* /*request*/, ::cloudeinapi::PrepareFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoPrepareFailAPI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoConnectFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoConnectFailAPI() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DoConnectFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoConnectFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::ConnectFailRequest* /*request*/, ::cloudeinapi::ConnectFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoConnectFailAPI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoRebootFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoRebootFailAPI() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_DoRebootFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoRebootFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::RebootFailRequest* /*request*/, ::cloudeinapi::RebootFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoRebootFailAPI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoAuthFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoAuthFailAPI() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_DoAuthFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoAuthFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::AuthFailRequest* /*request*/, ::cloudeinapi::AuthFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoAuthFailAPI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoAllocateAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoAllocateAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoAllocateAPI(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoAllocateAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoAllocateAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::AllocateRequest* /*request*/, ::cloudeinapi::AllocateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoAllocateAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoAllocateAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoPrepareAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoPrepareAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoPrepareAPI(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoPrepareAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoPrepareAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::PrepareRequest* /*request*/, ::cloudeinapi::PrepareResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoPrepareAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoPrepareAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoConnectAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoConnectAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoConnectAPI(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoConnectAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoConnectAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::ConnectRequest* /*request*/, ::cloudeinapi::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoConnectAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoConnectAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoReleaseAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoReleaseAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoReleaseAPI(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoReleaseAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoReleaseAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::ReleaseRequest* /*request*/, ::cloudeinapi::ReleaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoReleaseAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoReleaseAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoDisconnectAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoDisconnectAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoDisconnectAPI(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoDisconnectAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoDisconnectAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::DisconnectRequest* /*request*/, ::cloudeinapi::DisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoDisconnectAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoDisconnectAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoTimeoutAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoTimeoutAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoTimeoutAPI(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoTimeoutAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoTimeoutAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::TimeoutRequest* /*request*/, ::cloudeinapi::TimeoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoTimeoutAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoTimeoutAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoPrepareFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoPrepareFailAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoPrepareFailAPI(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoPrepareFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoPrepareFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::PrepareFailRequest* /*request*/, ::cloudeinapi::PrepareFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoPrepareFailAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoPrepareFailAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoConnectFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoConnectFailAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoConnectFailAPI(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoConnectFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoConnectFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::ConnectFailRequest* /*request*/, ::cloudeinapi::ConnectFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoConnectFailAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoConnectFailAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoRebootFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoRebootFailAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoRebootFailAPI(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoRebootFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoRebootFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::RebootFailRequest* /*request*/, ::cloudeinapi::RebootFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoRebootFailAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoRebootFailAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoAuthFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoAuthFailAPI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoAuthFailAPI(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoAuthFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoAuthFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::AuthFailRequest* /*request*/, ::cloudeinapi::AuthFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoAuthFailAPI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoAuthFailAPI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoAllocateAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoAllocateAPI() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cloudeinapi::AllocateRequest, ::cloudeinapi::AllocateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cloudeinapi::AllocateRequest, ::cloudeinapi::AllocateResponse>* streamer) {
                       return this->StreamedDoAllocateAPI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoAllocateAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoAllocateAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::AllocateRequest* /*request*/, ::cloudeinapi::AllocateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoAllocateAPI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudeinapi::AllocateRequest,::cloudeinapi::AllocateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoPrepareAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoPrepareAPI() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cloudeinapi::PrepareRequest, ::cloudeinapi::PrepareResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cloudeinapi::PrepareRequest, ::cloudeinapi::PrepareResponse>* streamer) {
                       return this->StreamedDoPrepareAPI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoPrepareAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoPrepareAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::PrepareRequest* /*request*/, ::cloudeinapi::PrepareResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoPrepareAPI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudeinapi::PrepareRequest,::cloudeinapi::PrepareResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoConnectAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoConnectAPI() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cloudeinapi::ConnectRequest, ::cloudeinapi::ConnectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cloudeinapi::ConnectRequest, ::cloudeinapi::ConnectResponse>* streamer) {
                       return this->StreamedDoConnectAPI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoConnectAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoConnectAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::ConnectRequest* /*request*/, ::cloudeinapi::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoConnectAPI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudeinapi::ConnectRequest,::cloudeinapi::ConnectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoReleaseAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoReleaseAPI() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cloudeinapi::ReleaseRequest, ::cloudeinapi::ReleaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cloudeinapi::ReleaseRequest, ::cloudeinapi::ReleaseResponse>* streamer) {
                       return this->StreamedDoReleaseAPI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoReleaseAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoReleaseAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::ReleaseRequest* /*request*/, ::cloudeinapi::ReleaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoReleaseAPI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudeinapi::ReleaseRequest,::cloudeinapi::ReleaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoDisconnectAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoDisconnectAPI() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cloudeinapi::DisconnectRequest, ::cloudeinapi::DisconnectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cloudeinapi::DisconnectRequest, ::cloudeinapi::DisconnectResponse>* streamer) {
                       return this->StreamedDoDisconnectAPI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoDisconnectAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoDisconnectAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::DisconnectRequest* /*request*/, ::cloudeinapi::DisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoDisconnectAPI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudeinapi::DisconnectRequest,::cloudeinapi::DisconnectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoTimeoutAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoTimeoutAPI() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cloudeinapi::TimeoutRequest, ::cloudeinapi::TimeoutResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cloudeinapi::TimeoutRequest, ::cloudeinapi::TimeoutResponse>* streamer) {
                       return this->StreamedDoTimeoutAPI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoTimeoutAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoTimeoutAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::TimeoutRequest* /*request*/, ::cloudeinapi::TimeoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoTimeoutAPI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudeinapi::TimeoutRequest,::cloudeinapi::TimeoutResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoPrepareFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoPrepareFailAPI() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cloudeinapi::PrepareFailRequest, ::cloudeinapi::PrepareFailResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cloudeinapi::PrepareFailRequest, ::cloudeinapi::PrepareFailResponse>* streamer) {
                       return this->StreamedDoPrepareFailAPI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoPrepareFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoPrepareFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::PrepareFailRequest* /*request*/, ::cloudeinapi::PrepareFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoPrepareFailAPI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudeinapi::PrepareFailRequest,::cloudeinapi::PrepareFailResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoConnectFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoConnectFailAPI() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cloudeinapi::ConnectFailRequest, ::cloudeinapi::ConnectFailResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cloudeinapi::ConnectFailRequest, ::cloudeinapi::ConnectFailResponse>* streamer) {
                       return this->StreamedDoConnectFailAPI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoConnectFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoConnectFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::ConnectFailRequest* /*request*/, ::cloudeinapi::ConnectFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoConnectFailAPI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudeinapi::ConnectFailRequest,::cloudeinapi::ConnectFailResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoRebootFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoRebootFailAPI() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cloudeinapi::RebootFailRequest, ::cloudeinapi::RebootFailResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cloudeinapi::RebootFailRequest, ::cloudeinapi::RebootFailResponse>* streamer) {
                       return this->StreamedDoRebootFailAPI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoRebootFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoRebootFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::RebootFailRequest* /*request*/, ::cloudeinapi::RebootFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoRebootFailAPI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudeinapi::RebootFailRequest,::cloudeinapi::RebootFailResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoAuthFailAPI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoAuthFailAPI() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cloudeinapi::AuthFailRequest, ::cloudeinapi::AuthFailResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cloudeinapi::AuthFailRequest, ::cloudeinapi::AuthFailResponse>* streamer) {
                       return this->StreamedDoAuthFailAPI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoAuthFailAPI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoAuthFailAPI(::grpc::ServerContext* /*context*/, const ::cloudeinapi::AuthFailRequest* /*request*/, ::cloudeinapi::AuthFailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoAuthFailAPI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudeinapi::AuthFailRequest,::cloudeinapi::AuthFailResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DoAllocateAPI<WithStreamedUnaryMethod_DoPrepareAPI<WithStreamedUnaryMethod_DoConnectAPI<WithStreamedUnaryMethod_DoReleaseAPI<WithStreamedUnaryMethod_DoDisconnectAPI<WithStreamedUnaryMethod_DoTimeoutAPI<WithStreamedUnaryMethod_DoPrepareFailAPI<WithStreamedUnaryMethod_DoConnectFailAPI<WithStreamedUnaryMethod_DoRebootFailAPI<WithStreamedUnaryMethod_DoAuthFailAPI<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DoAllocateAPI<WithStreamedUnaryMethod_DoPrepareAPI<WithStreamedUnaryMethod_DoConnectAPI<WithStreamedUnaryMethod_DoReleaseAPI<WithStreamedUnaryMethod_DoDisconnectAPI<WithStreamedUnaryMethod_DoTimeoutAPI<WithStreamedUnaryMethod_DoPrepareFailAPI<WithStreamedUnaryMethod_DoConnectFailAPI<WithStreamedUnaryMethod_DoRebootFailAPI<WithStreamedUnaryMethod_DoAuthFailAPI<Service > > > > > > > > > > StreamedService;
};

}  // namespace cloudeinapi


#endif  // GRPC_CloudeinAPI_2eproto__INCLUDED
