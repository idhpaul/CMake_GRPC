// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: CloudeinAPI.proto

#include "CloudeinAPI.pb.h"
#include "CloudeinAPI.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace cloudeinapi {

static const char* CloudeinSession_method_names[] = {
  "/cloudeinapi.CloudeinSession/DoAllocateAPI",
  "/cloudeinapi.CloudeinSession/DoPrepareAPI",
  "/cloudeinapi.CloudeinSession/DoConnectAPI",
  "/cloudeinapi.CloudeinSession/DoReleaseAPI",
};

std::unique_ptr< CloudeinSession::Stub> CloudeinSession::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CloudeinSession::Stub> stub(new CloudeinSession::Stub(channel, options));
  return stub;
}

CloudeinSession::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_DoAllocateAPI_(CloudeinSession_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DoPrepareAPI_(CloudeinSession_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DoConnectAPI_(CloudeinSession_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DoReleaseAPI_(CloudeinSession_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CloudeinSession::Stub::DoAllocateAPI(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest& request, ::cloudeinapi::AllocateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cloudeinapi::AllocateRequest, ::cloudeinapi::AllocateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DoAllocateAPI_, context, request, response);
}

void CloudeinSession::Stub::experimental_async::DoAllocateAPI(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest* request, ::cloudeinapi::AllocateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cloudeinapi::AllocateRequest, ::cloudeinapi::AllocateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoAllocateAPI_, context, request, response, std::move(f));
}

void CloudeinSession::Stub::experimental_async::DoAllocateAPI(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest* request, ::cloudeinapi::AllocateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoAllocateAPI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cloudeinapi::AllocateResponse>* CloudeinSession::Stub::PrepareAsyncDoAllocateAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cloudeinapi::AllocateResponse, ::cloudeinapi::AllocateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DoAllocateAPI_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cloudeinapi::AllocateResponse>* CloudeinSession::Stub::AsyncDoAllocateAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::AllocateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDoAllocateAPIRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CloudeinSession::Stub::DoPrepareAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest& request, ::cloudeinapi::PrepareResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cloudeinapi::PrepareRequest, ::cloudeinapi::PrepareResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DoPrepareAPI_, context, request, response);
}

void CloudeinSession::Stub::experimental_async::DoPrepareAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest* request, ::cloudeinapi::PrepareResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cloudeinapi::PrepareRequest, ::cloudeinapi::PrepareResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoPrepareAPI_, context, request, response, std::move(f));
}

void CloudeinSession::Stub::experimental_async::DoPrepareAPI(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest* request, ::cloudeinapi::PrepareResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoPrepareAPI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cloudeinapi::PrepareResponse>* CloudeinSession::Stub::PrepareAsyncDoPrepareAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cloudeinapi::PrepareResponse, ::cloudeinapi::PrepareRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DoPrepareAPI_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cloudeinapi::PrepareResponse>* CloudeinSession::Stub::AsyncDoPrepareAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDoPrepareAPIRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CloudeinSession::Stub::DoConnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest& request, ::cloudeinapi::ConnectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cloudeinapi::ConnectRequest, ::cloudeinapi::ConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DoConnectAPI_, context, request, response);
}

void CloudeinSession::Stub::experimental_async::DoConnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest* request, ::cloudeinapi::ConnectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cloudeinapi::ConnectRequest, ::cloudeinapi::ConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoConnectAPI_, context, request, response, std::move(f));
}

void CloudeinSession::Stub::experimental_async::DoConnectAPI(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest* request, ::cloudeinapi::ConnectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoConnectAPI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cloudeinapi::ConnectResponse>* CloudeinSession::Stub::PrepareAsyncDoConnectAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cloudeinapi::ConnectResponse, ::cloudeinapi::ConnectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DoConnectAPI_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cloudeinapi::ConnectResponse>* CloudeinSession::Stub::AsyncDoConnectAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDoConnectAPIRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CloudeinSession::Stub::DoReleaseAPI(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest& request, ::cloudeinapi::ReleaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cloudeinapi::ReleaseRequest, ::cloudeinapi::ReleaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DoReleaseAPI_, context, request, response);
}

void CloudeinSession::Stub::experimental_async::DoReleaseAPI(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest* request, ::cloudeinapi::ReleaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cloudeinapi::ReleaseRequest, ::cloudeinapi::ReleaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoReleaseAPI_, context, request, response, std::move(f));
}

void CloudeinSession::Stub::experimental_async::DoReleaseAPI(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest* request, ::cloudeinapi::ReleaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoReleaseAPI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cloudeinapi::ReleaseResponse>* CloudeinSession::Stub::PrepareAsyncDoReleaseAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cloudeinapi::ReleaseResponse, ::cloudeinapi::ReleaseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DoReleaseAPI_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cloudeinapi::ReleaseResponse>* CloudeinSession::Stub::AsyncDoReleaseAPIRaw(::grpc::ClientContext* context, const ::cloudeinapi::ReleaseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDoReleaseAPIRaw(context, request, cq);
  result->StartCall();
  return result;
}

CloudeinSession::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudeinSession_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudeinSession::Service, ::cloudeinapi::AllocateRequest, ::cloudeinapi::AllocateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CloudeinSession::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cloudeinapi::AllocateRequest* req,
             ::cloudeinapi::AllocateResponse* resp) {
               return service->DoAllocateAPI(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudeinSession_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudeinSession::Service, ::cloudeinapi::PrepareRequest, ::cloudeinapi::PrepareResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CloudeinSession::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cloudeinapi::PrepareRequest* req,
             ::cloudeinapi::PrepareResponse* resp) {
               return service->DoPrepareAPI(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudeinSession_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudeinSession::Service, ::cloudeinapi::ConnectRequest, ::cloudeinapi::ConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CloudeinSession::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cloudeinapi::ConnectRequest* req,
             ::cloudeinapi::ConnectResponse* resp) {
               return service->DoConnectAPI(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudeinSession_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudeinSession::Service, ::cloudeinapi::ReleaseRequest, ::cloudeinapi::ReleaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CloudeinSession::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cloudeinapi::ReleaseRequest* req,
             ::cloudeinapi::ReleaseResponse* resp) {
               return service->DoReleaseAPI(ctx, req, resp);
             }, this)));
}

CloudeinSession::Service::~Service() {
}

::grpc::Status CloudeinSession::Service::DoAllocateAPI(::grpc::ServerContext* context, const ::cloudeinapi::AllocateRequest* request, ::cloudeinapi::AllocateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudeinSession::Service::DoPrepareAPI(::grpc::ServerContext* context, const ::cloudeinapi::PrepareRequest* request, ::cloudeinapi::PrepareResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudeinSession::Service::DoConnectAPI(::grpc::ServerContext* context, const ::cloudeinapi::ConnectRequest* request, ::cloudeinapi::ConnectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudeinSession::Service::DoReleaseAPI(::grpc::ServerContext* context, const ::cloudeinapi::ReleaseRequest* request, ::cloudeinapi::ReleaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cloudeinapi

